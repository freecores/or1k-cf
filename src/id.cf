(*
     Instruction decoder for OpenRisc 1200

     Copyright 2004 Ken Rose
     All rights reserved
*)

-T
is

component T
  +IR
  -WB_write_what -WB_write_enable -WB_Dest -ALUctl
  -MEMWriteEnable -LatchFlag -CalcFlag -MemOffset -UseIMM -IM
  -RunFetch -SysCall -IllInstr -SPROffset -LatchSPR
with
  MulStall
is

  IM <- ((IR'[15]) '#' 17) '++' (IR'[14:0])

  MEMWriteEnable <- (IR'[31:26] '==' '110101') '?' '01' (* write word *)
                ':' (IR'[31:26] '==' '110110') '?' '10' (* write byte *)
                ':' (IR'[31:26] '==' '110111') '?' '11' (* write half *)
		':'                                '00' (* Don't write *)

  (* Control for writeback mux.  Must match writeback
       "0000"   ALU output
       "0001"   Zero-extended memory word
       "0010"   Sign-extended memory word
       "0011"   Zero-extended memory byte
       "0100"   Sign-extended memory byte
       "0101"   Zero-extended memory halfword
       "0110"   Sign-extended memory halfword
       "0111"   Immediate data in high half
       "1000"   Data from SPR
  *)
  WB_write_what <-  IR'[31:26] '==' '100111' '?' '0000'      (* l.addi *)
                ':' IR'[31:29] '==' '100'    '?' '0' '++' IR'[28:26] (* loads *)
                ':' IR'[31:26] '==' '000110' '?' '0111'      (* l.movhi *)
		':' IR'[31:26] '==' '101101' '?' '1000'      (* l.mfspr *)
                ':'                              '0000'

  (* Next is reg file write enable *)
  WB_write_enable <-   IR'[31:26] '==' '000110'  (* movhi *)
                   '|' IR'[31:26] '==' '101101'  (* mfspr *)
	           '|' IR'[31:30] '==' '10'     (* loads & immediate ALU *)
		   '|' IR'[31:26] '==' '111000' (* register ALU *)


  (* Select an immediate operand *)
  UseIMM <- IR'[31:29] '==' '101' '|' IR'[31:26] '==' '100111'

  (* Send the memory offset to the MEM unit *)
  MemOffset <- IR'[31:29] '==' '110' '?' ((IR'[25]) '#' 17) '++' (IR'[24:21 10:0])
                                     ':' ((IR'[15]) '#' 17) '++' (IR'[14:0])

  (* Send the SPR offset to the SPR code *)
  LatchSPR <- IR'[31:26] '==' '110000'
  SPROffset <- LatchSPR '?' IR'[25:21 10:0] ':' IR'[15:0]

  (* Control ALU *)
  local RRctl RIctl is
    RRctl <- IR'[9:6 3:0] '==' '00001000' '?' '0000'   (* sll *)
         ':' IR'[9:6 3:0] '==' '00011000' '?' '0001'   (* srl *)
         ':' IR'[9:6 3:0] '==' '00011000' '?' '0010'   (* sra *)
         ':' IR'[9:8 3:0] '==' '000000'   '?' '0011'   (* add *)
         ':' IR'[9:8 3:0] '==' '000001'   '?' '0100'   (* addc *)
         ':' IR'[9:8 3:0] '==' '000010'   '?' '0101'   (* sub *)
         ':' IR'[9:8 3:0] '==' '000011'   '?' '0110'   (* and *)
         ':' IR'[9:8 3:0] '==' '000100'   '?' '0111'   (* or *)
         ':' IR'[9:8 3:0] '==' '000101'   '?' '1000'   (* xor *)
         ':' IR'[9:8 3:0] '==' '110110'   '?' '1001'   (* mul *)
         ':' IR'[9:8 3:0] '==' '111011'   '?' '1010'   (* mulu *)
	 ':'                                  '0011'   (* default add *)

    RIctl <- IR'[31:26]     '==' '100111'   '?' '0011'   (* addi *)
         ':' IR'[31:26]     '==' '101001'   '?' '0110'   (* andi *)
         ':' IR'[31:26]     '==' '101010'   '?' '0111'   (* ori *)
         ':' IR'[31:26]     '==' '101011'   '?' '1000'   (* xori *)
         ':' IR'[31:26]     '==' '101100'   '?' '1001'   (* muli *)
         ':' IR'[31:26 7 6] '==' '10111000' '?' '0000'   (* slli *)
         ':' IR'[31:26 7 6] '==' '10111001' '?' '0001'   (* srli *)
         ':' IR'[31:26 7 6] '==' '10111010' '?' '0010'   (* srai *)
         ':' IR'[31:26 7 6] '==' '10111011' '?' '1011'   (* rori *)
	 ':'                                    '0011'   (* default add *)

    ALUctl <- IR'[31:26] '==' '111000' '?' RRctl ':' RIctl
  end
  MulStall <- ALUctl '==' '1001' '|' ALUctl '==' '1010'
  (*
  {StateMachine, [
                  [ "0" 0 0 "1" ]
                  [ "1" 0 1 "0" ]
                  [ "-" 1 2 "0" ]
                  [ "-" 2 0 "1" ]
                 ] MulStall, RunFetch}
    *) RunFetch <- '1'

  (* Control the flag bit *)
  LatchFlag <- IR'[31:26] '==' '111001'
  CalcFlag <- IR'[24:21]

  (* Illegal Instruction *)
  IllInstr <- '0'

  (* System call instruction *)
  SysCall <- IR'[31:16] '==' '0x2000'

  (* If there's a register writeback, the register number is here. *)
  WB_Dest <- IR'[25:21]

end

